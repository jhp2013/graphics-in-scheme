(define wave2 (beside wave (flip-vert wave)))
(define wave4 (below wave2 wave2))

(define (flipped-pairs painter)
  (let ((painter2 (beside painter (flip-vert painter))))
    (below painter2 painter2)))

(define wave4 (flipped-pairs wave))

;; Code for picture language
--------------------------------------------------------------------------------
(define (flipped-pairs painter)
  (let ((painter2 (beside painter (flip-vert painter))))
    (below painter2 painter2)))

(define (right-split painter n)
  (if (= n 0)
      painter
      (let ((smaller (right-split painter (- n 1))))
	(beside painter (below smaller smaller)))))

##

(define (up-split painter n)
  (if (= n 0)
	  painter
	  (let ((upper (up-split painter (- n 1))))
	    (below painter (beside upper upper)))))

##

(define (corner-split painter n)
  (if (= n 0)
      painter
      (let ((up (up-split painter (- n 1)))
	    (right (right-split painter (- n 1))))
	(let ((top-left (beside up up))
	      (bottom-right (below right right))
	      (corner (corner-split painter (- n 1))))
	  (beside (below painter top-left)
		  (below bottom-right corner))))))

(define (square-limit painter n)
  (let ((quarter (corner-split painter n)))
    (let ((half (beside (flip-horiz quarter) quarter)))
      (below (flip-vert half) half))))
----------------------------------------------------------------------------------


(define (square-of-four tl tr bl br)
  (lambda (painter)
    (let ((top (beside (tl painter) (tr painter)))
	      (bottom (beside (bl painter) (br painter))))
      (below bottom top))))

(define (identity x) x)

(define (flipped-pairs painter)
  (let ((combine4 (square-of-four identity flip-vert
				  identity flip-vert)))
    (combine4 painter)))

;; or

      (define foo

            (let ((x 4))

              (lambda (y) (+ x y)) )  )

              (foo 6)

; (define flipped-pairs
;   (square-of-four identity flip-vert identity flip-vert))

(define (square-limit painter n)
  (let ((combine4 (square-of-four flip-horiz identity
				  rotate180 flip-vert)))
    (combine4 (corner-split painter n))))


####2#####

(define (split sider split-placer) 
   (lambda (painter n) 
     (cond ((= n 0) painter) 
           (else 
            (let ((smaller ((split orig-placer split-placer) painter (- n 1)))) 
              (orig-placer painter (split-placer smaller smaller)))))))

##########

(define (frame-coord-map frame)
  (lambda (v)
    (add-vect
     (origin-frame frame)
     (add-vect (scale-vect (xcor-vect v)
			   			   (edge1-frame frame))
	       (scale-vect (ycor-vect v)
			   		   (edge2-frame frame))))))

#####3#####

(define (make-vect x-cord y-cord)  
  (cons x-cord y-cord))  
  
(define (xcor-vect vector)  
  (car vector))  
  
(define (ycor-vect vector)  
  (cdr vector))  
  
(define (add-vect v1 v2)  
  (make-vect (+ (xcor-vect v1) (xcor-vect v2))  
             (+ (ycor-vect v1) (ycor-vect v2))))  
  
(define (sub-vect v1 v2)  
  (make-vect (- (xcor-vect v1) (xcor-vect v2))  
             (- (ycor-vect v1) (ycor-vect v2))))  
  
(define (scale-vect s v)  
  (make-vect (* s (xcor-vect v))  
             (* s (ycor-vect v))))

###########


#####4#####

(define (make-frame origin edge1 edge2)  
  (list origin edge1 edge2))  
  
(define (make-frame origin edge1 edge2)  
  (cons origin (cons edge1 edge2)))

;; Option 1 and selectors  
(define (make-frame origin edge1 edge2)  
  (list origin edge1 edge2))  
  
(define (origin-frame frame)  
  (car frame))  
  
(define (edge1-frame frame)  
  (cadr frame))  
  
(define (edge2-frame frame)  
  (caddr frame))  
  
;; Option 2 and selectors  
(define (make-frame origin edge1 edge2)  
  (cons origin (cons edge1 edge2)))  
  
(define (origin-frame frame)  
  (car frame))  
  
(define (edge1-frame frame)  
  (cadr frame))  
  
(define (edge2-frame frame)  
  (cddr frame))  

###########

(define (segments->painter segment-list)
  (lambda (frame)
    (for-each
     (lambda (segment)
       (draw-line
	((frame-coord-map frame) (start-segment segment))
	((frame-coord-map frame) (end-segment segment))))
     segment-list)))

#####5#####

(define (make-segment start-point-vector end-point-vector)  
  (cons start-point-vector end-point-vector))  
  
(define (start-segment segment)  
  (car segment))  
  
(define (end-segment segment)  
  (cdr segment))

############

######6a#####

(define outline-segments  
  (let ((origin (make-vect 0.0 0.0))  
        (one-zero (make-vect 1.0 0.0))  
        (zero-one (make-vect 0.0 1.0))  
        (one-one (make-vect 1.0 1.0)))  
    (list  
     (make-segment origin zero-one)  
     (make-segment origin one-zero)  
     (make-segment one-zero one-one)  
     (make-segment one-one zero-one))))  
  
(define outline-painter (segments->painter outline-segments))

######6b#####

(define diagonal-segments  
  (let ((origin (make-vect 0.0 0.0))  
        (one-zero (make-vect 1.0 0.0))  
        (zero-one (make-vect 0.0 1.0))  
        (one-one (make-vect 1.0 1.0)))  
    (list  
     (make-segment origin one-one)  
     (make-segment zero-one one-zero))))  
  
(define x-painter (segments->painter diagonal-segments)) 

######6c#######

(define midpoint-segments  
  (let ((m1 (make-vect 0.5 0.0))  
        (m2 (make-vect 1.0 0.5))  
        (m3 (make-vect 0.5 1.0))  
        (m4 (make-vect 0.0 0.5)))  
    (list  
     (make-segment m1 m2)  
     (make-segment m2 m3)  
     (make-segment m3 m4)  
     (make-segment m4 m1))))  
  
(define diamond-painter (segments->painter midpoint-segments))

##############

(define (draw-line v1 v2)
  (penup)
  (setxy (- (* (xcor-vect v1) 200) 100)
	 (- (* (ycor-vect v1) 200) 100))
  (pendown)
  (setxy (- (* (xcor-vect v2) 200) 100)
	 (- (* (ycor-vect v2) 200) 100)))

(define (transform-painter painter origin corner1 corner2)
  (lambda (frame)
    (let ((m (frame-coord-map frame)))
      (let ((new-origin (m origin)))
	(painter
	 (make-frame new-origin
		     (sub-vect (m corner1) new-origin)
		     (sub-vect (m corner2) new-origin)))))))

(define (flip-vert painter)
  (transform-painter painter
		     (make-vect 0.0 1.0)
		     (make-vect 1.0 1.0)
		     (make-vect 0.0 0.0)))

(define (shrink-to-upper-right painter)
  (transform-painter painter
		    (make-vect 0.5 0.5)
		    (make-vect 1.0 0.5)
		    (make-vect 0.5 1.0)))

(define (rotate90 painter)
  (transform-painter painter
		     (make-vect 1.0 0.0)
		     (make-vect 1.0 1.0)
		     (make-vect 0.0 0.0)))

(define (squash-inwards painter)
  (transform-painter painter
		     (make-vect 0.0 0.0)
		     (make-vect 0.65 0.35)
		     (make-vect 0.35 0.65)))

(define (beside painter1 painter2)
  (let ((split-point (make-vect 0.5 0.0)))
    (let ((paint-left
	   (transform-painter painter1
			      (make-vect 0.0 0.0)
			      split-point
			      (make-vect 0.0 1.0)))
	  (paint-right
	   (transform-painter painter2
			      split-point
			      (make-vect 1.0 0.0)
			      (make-vect 0.5 1.0))))
      (lambda (frame)
	(paint-left frame)
	(paint-right frame)))))

(define full-frame (make-frame (make-vect -0.5 -0.5)
			       (make-vect 2 0)
			       (make-vect 0 2)))

###################7#######################

(define (flip-horiz painter)  
  (transform-painter painter  
                     (make-vect 1.0 0.0)  
                     (make-vect 0.0 0.0)  
                     (make-vect 1.0 1.0)))  
            
(define (rotate-ccw-180 painter)  
  (transform-painter painter  
                     (make-vect 1.0 1.0)  
                     (make-vect 0.0 1.0)  
                     (make-vect 1.0 0.0)))  
  
(define (rotate-ccw-270 painter)  
  (transform-painter painter  
                     (make-vect 0.0 1.0)  
                     (make-vect 0.0 0.0)  
                     (make-vect 1.0 1.0)))  

######################8#######################

;; below - analogous to beside  
(define (below painter-bottom painter-top)  
  (let ((split-point (make-vect 0 0.5)))  
    (let ((paint-top  
           (transform-painter painter-top  
                              split-point                                
                              (make-vect 1.0 0.5)  
                              (make-vect 0.0 1.0)))  
          (paint-bottom  
           (transform-painter painter-bottom  
                              (make-vect 0.0 0.0)  
                              (make-vect 1.0 0.0)  
                              split-point)))  
      (lambda (frame)  
        (paint-top frame)  
        (paint-bottom frame)))))  
  
;; below in terms of beside and rotation operations from Exercise 2.50  
(define (below painter-bottom painter-top)  
  (lambda (frame)  
    (rotate-ccw-90   
     (beside (rotate-ccw-270 painter-bottom)  
             (rotate-ccw-270 painter-top)))  
    frame))

################################################


########################9a######################




#######################9b#######################
;; b. change pattern used by corner-split  
(define (corner-split painter n)  
  (if (= n 0)  
      painter  
      (let ((up (up-split painter (- n 1)))  
            (right (right-split painter (- n 1))))  
        (let ((corner (corner-split (painter (- n 1)))))  
          (beside (below painter up)  
                  (below right corner))))))

#######################9c###############
;; c. modify square-limit  
(define (square-limit painter n)  
  (let ((quarter (corner-split painter n)))  
    (let ((half (beside quarter (flip-horiz quarter))))  
      (below (flip-vert half) half))))  
####################################################

